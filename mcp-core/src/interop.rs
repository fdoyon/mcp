// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `interop.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Query {
    // message fields
    pub schema: ::protobuf::SingularPtrField<Query_Schema>,
    pub instruments_by_server: ::std::collections::HashMap<::std::string::String, Query_Identifiers>,
    pub start: ::protobuf::SingularPtrField<Query_TimeReference>,
    pub end: ::protobuf::SingularPtrField<Query_TimeReference>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Query {
    fn default() -> &'a Query {
        <Query as ::protobuf::Message>::default_instance()
    }
}

impl Query {
    pub fn new() -> Query {
        ::std::default::Default::default()
    }

    // .Query.Schema schema = 1;


    pub fn get_schema(&self) -> &Query_Schema {
        self.schema.as_ref().unwrap_or_else(|| Query_Schema::default_instance())
    }
    pub fn clear_schema(&mut self) {
        self.schema.clear();
    }

    pub fn has_schema(&self) -> bool {
        self.schema.is_some()
    }

    // Param is passed by value, moved
    pub fn set_schema(&mut self, v: Query_Schema) {
        self.schema = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_schema(&mut self) -> &mut Query_Schema {
        if self.schema.is_none() {
            self.schema.set_default();
        }
        self.schema.as_mut().unwrap()
    }

    // Take field
    pub fn take_schema(&mut self) -> Query_Schema {
        self.schema.take().unwrap_or_else(|| Query_Schema::new())
    }

    // repeated .Query.InstrumentsByServerEntry instruments_by_server = 2;


    pub fn get_instruments_by_server(&self) -> &::std::collections::HashMap<::std::string::String, Query_Identifiers> {
        &self.instruments_by_server
    }
    pub fn clear_instruments_by_server(&mut self) {
        self.instruments_by_server.clear();
    }

    // Param is passed by value, moved
    pub fn set_instruments_by_server(&mut self, v: ::std::collections::HashMap<::std::string::String, Query_Identifiers>) {
        self.instruments_by_server = v;
    }

    // Mutable pointer to the field.
    pub fn mut_instruments_by_server(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Query_Identifiers> {
        &mut self.instruments_by_server
    }

    // Take field
    pub fn take_instruments_by_server(&mut self) -> ::std::collections::HashMap<::std::string::String, Query_Identifiers> {
        ::std::mem::replace(&mut self.instruments_by_server, ::std::collections::HashMap::new())
    }

    // .Query.TimeReference start = 3;


    pub fn get_start(&self) -> &Query_TimeReference {
        self.start.as_ref().unwrap_or_else(|| Query_TimeReference::default_instance())
    }
    pub fn clear_start(&mut self) {
        self.start.clear();
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: Query_TimeReference) {
        self.start = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start(&mut self) -> &mut Query_TimeReference {
        if self.start.is_none() {
            self.start.set_default();
        }
        self.start.as_mut().unwrap()
    }

    // Take field
    pub fn take_start(&mut self) -> Query_TimeReference {
        self.start.take().unwrap_or_else(|| Query_TimeReference::new())
    }

    // .Query.TimeReference end = 4;


    pub fn get_end(&self) -> &Query_TimeReference {
        self.end.as_ref().unwrap_or_else(|| Query_TimeReference::default_instance())
    }
    pub fn clear_end(&mut self) {
        self.end.clear();
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: Query_TimeReference) {
        self.end = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end(&mut self) -> &mut Query_TimeReference {
        if self.end.is_none() {
            self.end.set_default();
        }
        self.end.as_mut().unwrap()
    }

    // Take field
    pub fn take_end(&mut self) -> Query_TimeReference {
        self.end.take().unwrap_or_else(|| Query_TimeReference::new())
    }
}

impl ::protobuf::Message for Query {
    fn is_initialized(&self) -> bool {
        for v in &self.schema {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.start {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.schema)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Query_Identifiers>>(wire_type, is, &mut self.instruments_by_server)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.schema.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Query_Identifiers>>(2, &self.instruments_by_server);
        if let Some(ref v) = self.start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.schema.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Query_Identifiers>>(2, &self.instruments_by_server, os)?;
        if let Some(ref v) = self.start.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Query {
        Query::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Query_Schema>>(
                    "schema",
                    |m: &Query| { &m.schema },
                    |m: &mut Query| { &mut m.schema },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Query_Identifiers>>(
                    "instruments_by_server",
                    |m: &Query| { &m.instruments_by_server },
                    |m: &mut Query| { &mut m.instruments_by_server },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Query_TimeReference>>(
                    "start",
                    |m: &Query| { &m.start },
                    |m: &mut Query| { &mut m.start },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Query_TimeReference>>(
                    "end",
                    |m: &Query| { &m.end },
                    |m: &mut Query| { &mut m.end },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Query>(
                    "Query",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Query {
        static mut instance: ::protobuf::lazy::Lazy<Query> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Query,
        };
        unsafe {
            instance.get(Query::new)
        }
    }
}

impl ::protobuf::Clear for Query {
    fn clear(&mut self) {
        self.schema.clear();
        self.instruments_by_server.clear();
        self.start.clear();
        self.end.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Query_TimeReference {
    // message oneof groups
    pub is: ::std::option::Option<Query_TimeReference_oneof_is>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Query_TimeReference {
    fn default() -> &'a Query_TimeReference {
        <Query_TimeReference as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Query_TimeReference_oneof_is {
    live(bool),
    epoch_ns(u64),
}

impl Query_TimeReference {
    pub fn new() -> Query_TimeReference {
        ::std::default::Default::default()
    }

    // bool live = 1;


    pub fn get_live(&self) -> bool {
        match self.is {
            ::std::option::Option::Some(Query_TimeReference_oneof_is::live(v)) => v,
            _ => false,
        }
    }
    pub fn clear_live(&mut self) {
        self.is = ::std::option::Option::None;
    }

    pub fn has_live(&self) -> bool {
        match self.is {
            ::std::option::Option::Some(Query_TimeReference_oneof_is::live(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_live(&mut self, v: bool) {
        self.is = ::std::option::Option::Some(Query_TimeReference_oneof_is::live(v))
    }

    // uint64 epoch_ns = 2;


    pub fn get_epoch_ns(&self) -> u64 {
        match self.is {
            ::std::option::Option::Some(Query_TimeReference_oneof_is::epoch_ns(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_epoch_ns(&mut self) {
        self.is = ::std::option::Option::None;
    }

    pub fn has_epoch_ns(&self) -> bool {
        match self.is {
            ::std::option::Option::Some(Query_TimeReference_oneof_is::epoch_ns(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_epoch_ns(&mut self, v: u64) {
        self.is = ::std::option::Option::Some(Query_TimeReference_oneof_is::epoch_ns(v))
    }
}

impl ::protobuf::Message for Query_TimeReference {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is = ::std::option::Option::Some(Query_TimeReference_oneof_is::live(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.is = ::std::option::Option::Some(Query_TimeReference_oneof_is::epoch_ns(is.read_uint64()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.is {
            match v {
                &Query_TimeReference_oneof_is::live(v) => {
                    my_size += 2;
                },
                &Query_TimeReference_oneof_is::epoch_ns(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.is {
            match v {
                &Query_TimeReference_oneof_is::live(v) => {
                    os.write_bool(1, v)?;
                },
                &Query_TimeReference_oneof_is::epoch_ns(v) => {
                    os.write_uint64(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Query_TimeReference {
        Query_TimeReference::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                    "live",
                    Query_TimeReference::has_live,
                    Query_TimeReference::get_live,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor::<_>(
                    "epoch_ns",
                    Query_TimeReference::has_epoch_ns,
                    Query_TimeReference::get_epoch_ns,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Query_TimeReference>(
                    "Query_TimeReference",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Query_TimeReference {
        static mut instance: ::protobuf::lazy::Lazy<Query_TimeReference> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Query_TimeReference,
        };
        unsafe {
            instance.get(Query_TimeReference::new)
        }
    }
}

impl ::protobuf::Clear for Query_TimeReference {
    fn clear(&mut self) {
        self.is = ::std::option::Option::None;
        self.is = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query_TimeReference {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query_TimeReference {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Query_Identifiers {
    // message fields
    pub codes: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Query_Identifiers {
    fn default() -> &'a Query_Identifiers {
        <Query_Identifiers as ::protobuf::Message>::default_instance()
    }
}

impl Query_Identifiers {
    pub fn new() -> Query_Identifiers {
        ::std::default::Default::default()
    }

    // repeated string codes = 1;


    pub fn get_codes(&self) -> &[::std::string::String] {
        &self.codes
    }
    pub fn clear_codes(&mut self) {
        self.codes.clear();
    }

    // Param is passed by value, moved
    pub fn set_codes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.codes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_codes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.codes
    }

    // Take field
    pub fn take_codes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.codes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Query_Identifiers {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.codes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.codes {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.codes {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Query_Identifiers {
        Query_Identifiers::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "codes",
                    |m: &Query_Identifiers| { &m.codes },
                    |m: &mut Query_Identifiers| { &mut m.codes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Query_Identifiers>(
                    "Query_Identifiers",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Query_Identifiers {
        static mut instance: ::protobuf::lazy::Lazy<Query_Identifiers> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Query_Identifiers,
        };
        unsafe {
            instance.get(Query_Identifiers::new)
        }
    }
}

impl ::protobuf::Clear for Query_Identifiers {
    fn clear(&mut self) {
        self.codes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query_Identifiers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query_Identifiers {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Query_Schema {
    // message fields
    pub name: ::std::string::String,
    pub timestamp_col: ::std::string::String,
    pub identifier_col: ::std::string::String,
    pub data_columns: ::protobuf::RepeatedField<Query_Schema_Field>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Query_Schema {
    fn default() -> &'a Query_Schema {
        <Query_Schema as ::protobuf::Message>::default_instance()
    }
}

impl Query_Schema {
    pub fn new() -> Query_Schema {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string timestamp_col = 2;


    pub fn get_timestamp_col(&self) -> &str {
        &self.timestamp_col
    }
    pub fn clear_timestamp_col(&mut self) {
        self.timestamp_col.clear();
    }

    // Param is passed by value, moved
    pub fn set_timestamp_col(&mut self, v: ::std::string::String) {
        self.timestamp_col = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp_col(&mut self) -> &mut ::std::string::String {
        &mut self.timestamp_col
    }

    // Take field
    pub fn take_timestamp_col(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.timestamp_col, ::std::string::String::new())
    }

    // string identifier_col = 3;


    pub fn get_identifier_col(&self) -> &str {
        &self.identifier_col
    }
    pub fn clear_identifier_col(&mut self) {
        self.identifier_col.clear();
    }

    // Param is passed by value, moved
    pub fn set_identifier_col(&mut self, v: ::std::string::String) {
        self.identifier_col = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier_col(&mut self) -> &mut ::std::string::String {
        &mut self.identifier_col
    }

    // Take field
    pub fn take_identifier_col(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.identifier_col, ::std::string::String::new())
    }

    // repeated .Query.Schema.Field data_columns = 4;


    pub fn get_data_columns(&self) -> &[Query_Schema_Field] {
        &self.data_columns
    }
    pub fn clear_data_columns(&mut self) {
        self.data_columns.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_columns(&mut self, v: ::protobuf::RepeatedField<Query_Schema_Field>) {
        self.data_columns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data_columns(&mut self) -> &mut ::protobuf::RepeatedField<Query_Schema_Field> {
        &mut self.data_columns
    }

    // Take field
    pub fn take_data_columns(&mut self) -> ::protobuf::RepeatedField<Query_Schema_Field> {
        ::std::mem::replace(&mut self.data_columns, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Query_Schema {
    fn is_initialized(&self) -> bool {
        for v in &self.data_columns {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.timestamp_col)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.identifier_col)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.data_columns)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.timestamp_col.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.timestamp_col);
        }
        if !self.identifier_col.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.identifier_col);
        }
        for value in &self.data_columns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.timestamp_col.is_empty() {
            os.write_string(2, &self.timestamp_col)?;
        }
        if !self.identifier_col.is_empty() {
            os.write_string(3, &self.identifier_col)?;
        }
        for v in &self.data_columns {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Query_Schema {
        Query_Schema::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Query_Schema| { &m.name },
                    |m: &mut Query_Schema| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "timestamp_col",
                    |m: &Query_Schema| { &m.timestamp_col },
                    |m: &mut Query_Schema| { &mut m.timestamp_col },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "identifier_col",
                    |m: &Query_Schema| { &m.identifier_col },
                    |m: &mut Query_Schema| { &mut m.identifier_col },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Query_Schema_Field>>(
                    "data_columns",
                    |m: &Query_Schema| { &m.data_columns },
                    |m: &mut Query_Schema| { &mut m.data_columns },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Query_Schema>(
                    "Query_Schema",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Query_Schema {
        static mut instance: ::protobuf::lazy::Lazy<Query_Schema> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Query_Schema,
        };
        unsafe {
            instance.get(Query_Schema::new)
        }
    }
}

impl ::protobuf::Clear for Query_Schema {
    fn clear(&mut self) {
        self.name.clear();
        self.timestamp_col.clear();
        self.identifier_col.clear();
        self.data_columns.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query_Schema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query_Schema {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Query_Schema_Field {
    // message fields
    pub name: ::std::string::String,
    pub kind: Query_Schema_Kind,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Query_Schema_Field {
    fn default() -> &'a Query_Schema_Field {
        <Query_Schema_Field as ::protobuf::Message>::default_instance()
    }
}

impl Query_Schema_Field {
    pub fn new() -> Query_Schema_Field {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .Query.Schema.Kind kind = 2;


    pub fn get_kind(&self) -> Query_Schema_Kind {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = Query_Schema_Kind::TIMESTAMP;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: Query_Schema_Kind) {
        self.kind = v;
    }
}

impl ::protobuf::Message for Query_Schema_Field {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.kind != Query_Schema_Kind::TIMESTAMP {
            my_size += ::protobuf::rt::enum_size(2, self.kind);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.kind != Query_Schema_Kind::TIMESTAMP {
            os.write_enum(2, self.kind.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Query_Schema_Field {
        Query_Schema_Field::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Query_Schema_Field| { &m.name },
                    |m: &mut Query_Schema_Field| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Query_Schema_Kind>>(
                    "kind",
                    |m: &Query_Schema_Field| { &m.kind },
                    |m: &mut Query_Schema_Field| { &mut m.kind },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Query_Schema_Field>(
                    "Query_Schema_Field",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Query_Schema_Field {
        static mut instance: ::protobuf::lazy::Lazy<Query_Schema_Field> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Query_Schema_Field,
        };
        unsafe {
            instance.get(Query_Schema_Field::new)
        }
    }
}

impl ::protobuf::Clear for Query_Schema_Field {
    fn clear(&mut self) {
        self.name.clear();
        self.kind = Query_Schema_Kind::TIMESTAMP;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Query_Schema_Field {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Query_Schema_Field {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Query_Schema_Kind {
    TIMESTAMP = 0,
    SYMBOL = 1,
    FLOAT = 2,
}

impl ::protobuf::ProtobufEnum for Query_Schema_Kind {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Query_Schema_Kind> {
        match value {
            0 => ::std::option::Option::Some(Query_Schema_Kind::TIMESTAMP),
            1 => ::std::option::Option::Some(Query_Schema_Kind::SYMBOL),
            2 => ::std::option::Option::Some(Query_Schema_Kind::FLOAT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Query_Schema_Kind] = &[
            Query_Schema_Kind::TIMESTAMP,
            Query_Schema_Kind::SYMBOL,
            Query_Schema_Kind::FLOAT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Query_Schema_Kind", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Query_Schema_Kind {
}

impl ::std::default::Default for Query_Schema_Kind {
    fn default() -> Self {
        Query_Schema_Kind::TIMESTAMP
    }
}

impl ::protobuf::reflect::ProtobufValue for Query_Schema_Kind {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rinterop.proto\"\xb8\x05\n\x05Query\x12%\n\x06schema\x18\x01\x20\x01(\
    \x0b2\r.Query.SchemaR\x06schema\x12S\n\x15instruments_by_server\x18\x02\
    \x20\x03(\x0b2\x1f.Query.InstrumentsByServerEntryR\x13instrumentsByServe\
    r\x12*\n\x05start\x18\x03\x20\x01(\x0b2\x14.Query.TimeReferenceR\x05star\
    t\x12&\n\x03end\x18\x04\x20\x01(\x0b2\x14.Query.TimeReferenceR\x03end\
    \x1aZ\n\x18InstrumentsByServerEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12(\n\x05value\x18\x02\x20\x01(\x0b2\x12.Query.IdentifiersR\x05\
    value:\x028\x01\x1aH\n\rTimeReference\x12\x14\n\x04live\x18\x01\x20\x01(\
    \x08H\0R\x04live\x12\x1b\n\x08epoch_ns\x18\x02\x20\x01(\x04H\0R\x07epoch\
    NsB\x04\n\x02is\x1a#\n\x0bIdentifiers\x12\x14\n\x05codes\x18\x01\x20\x03\
    (\tR\x05codes\x1a\x93\x02\n\x06Schema\x12\x12\n\x04name\x18\x01\x20\x01(\
    \tR\x04name\x12#\n\rtimestamp_col\x18\x02\x20\x01(\tR\x0ctimestampCol\
    \x12%\n\x0eidentifier_col\x18\x03\x20\x01(\tR\ridentifierCol\x126\n\x0cd\
    ata_columns\x18\x04\x20\x03(\x0b2\x13.Query.Schema.FieldR\x0bdataColumns\
    \x1aC\n\x05Field\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12&\n\
    \x04kind\x18\x02\x20\x01(\x0e2\x12.Query.Schema.KindR\x04kind\",\n\x04Ki\
    nd\x12\r\n\tTIMESTAMP\x10\0\x12\n\n\x06SYMBOL\x10\x01\x12\t\n\x05FLOAT\
    \x10\x02J\xbd\n\n\x06\x12\x04\0\0&\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \n\n\x02\x04\0\x12\x04\x02\0&\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\r\
    \n\x1f\n\x04\x04\0\x02\0\x12\x03\x03\x04\x16\"\x12\x20table\x20and\x20sc\
    hema\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x03\x04\n\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\x03\x0b\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x03\
    \x14\x15\n%\n\x04\x04\0\x02\x01\x12\x03\x05\x047\"\x18\x20instruments\
    \x20per\x20server\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x05\x04\x1c\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x05\x1d2\n\x0c\n\x05\x04\0\x02\x01\
    \x03\x12\x03\x0556\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x06\x04\x1c\n\x0c\n\
    \x05\x04\0\x02\x02\x06\x12\x03\x06\x04\x11\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x06\x12\x17\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x06\x1a\x1b\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\x07\x04\x1a\n\x0c\n\x05\x04\0\x02\x03\
    \x06\x12\x03\x07\x04\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x07\x12\
    \x15\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x07\x18\x19\n\x0c\n\x04\x04\0\
    \x03\x01\x12\x04\t\x04\x0e\x05\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\t\
    \x0c\x19\n\x0e\n\x06\x04\0\x03\x01\x08\0\x12\x04\n\x08\r\t\n\x0e\n\x07\
    \x04\0\x03\x01\x08\0\x01\x12\x03\n\x0e\x10\n\r\n\x06\x04\0\x03\x01\x02\0\
    \x12\x03\x0b\x0c\x1a\n\x0e\n\x07\x04\0\x03\x01\x02\0\x05\x12\x03\x0b\x0c\
    \x10\n\x0e\n\x07\x04\0\x03\x01\x02\0\x01\x12\x03\x0b\x11\x15\n\x0e\n\x07\
    \x04\0\x03\x01\x02\0\x03\x12\x03\x0b\x18\x19\n\r\n\x06\x04\0\x03\x01\x02\
    \x01\x12\x03\x0c\x0c\x20\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x05\x12\x03\
    \x0c\x0c\x12\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x01\x12\x03\x0c\x13\x1b\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03\x0c\x1e\x1f\nF\n\x04\x04\0\
    \x03\x02\x12\x04\x11\x04\x13\x05\x1a8\x20Specify\x20the\x20identifiers\
    \x20by\x20instrument\x20type\x20/\x20KDB\x20shard\n\n\x0c\n\x05\x04\0\
    \x03\x02\x01\x12\x03\x11\x0c\x17\n\r\n\x06\x04\0\x03\x02\x02\0\x12\x03\
    \x12\x08\"\n\x0e\n\x07\x04\0\x03\x02\x02\0\x04\x12\x03\x12\x08\x10\n\x0e\
    \n\x07\x04\0\x03\x02\x02\0\x05\x12\x03\x12\x11\x17\n\x0e\n\x07\x04\0\x03\
    \x02\x02\0\x01\x12\x03\x12\x18\x1d\n\x0e\n\x07\x04\0\x03\x02\x02\0\x03\
    \x12\x03\x12\x20!\n!\n\x04\x04\0\x03\x03\x12\x04\x16\x04%\x05\x1a\x13\
    \x20schema\x20definition\n\n\x0c\n\x05\x04\0\x03\x03\x01\x12\x03\x16\x0c\
    \x12\n\r\n\x06\x04\0\x03\x03\x02\0\x12\x03\x17\x08\x18\n\x0e\n\x07\x04\0\
    \x03\x03\x02\0\x05\x12\x03\x17\x08\x0e\n\x0e\n\x07\x04\0\x03\x03\x02\0\
    \x01\x12\x03\x17\x0f\x13\n\x0e\n\x07\x04\0\x03\x03\x02\0\x03\x12\x03\x17\
    \x16\x17\n\r\n\x06\x04\0\x03\x03\x02\x01\x12\x03\x18\x08!\n\x0e\n\x07\
    \x04\0\x03\x03\x02\x01\x05\x12\x03\x18\x08\x0e\n\x0e\n\x07\x04\0\x03\x03\
    \x02\x01\x01\x12\x03\x18\x0f\x1c\n\x0e\n\x07\x04\0\x03\x03\x02\x01\x03\
    \x12\x03\x18\x1f\x20\n\r\n\x06\x04\0\x03\x03\x02\x02\x12\x03\x19\x08\"\n\
    \x0e\n\x07\x04\0\x03\x03\x02\x02\x05\x12\x03\x19\x08\x0e\n\x0e\n\x07\x04\
    \0\x03\x03\x02\x02\x01\x12\x03\x19\x0f\x1d\n\x0e\n\x07\x04\0\x03\x03\x02\
    \x02\x03\x12\x03\x19\x20!\n\r\n\x06\x04\0\x03\x03\x02\x03\x12\x03\x1a\
    \x08(\n\x0e\n\x07\x04\0\x03\x03\x02\x03\x04\x12\x03\x1a\x08\x10\n\x0e\n\
    \x07\x04\0\x03\x03\x02\x03\x06\x12\x03\x1a\x11\x16\n\x0e\n\x07\x04\0\x03\
    \x03\x02\x03\x01\x12\x03\x1a\x17#\n\x0e\n\x07\x04\0\x03\x03\x02\x03\x03\
    \x12\x03\x1a&'\n\x0e\n\x06\x04\0\x03\x03\x04\0\x12\x04\x1c\x08\x20\t\n\
    \x0e\n\x07\x04\0\x03\x03\x04\0\x01\x12\x03\x1c\r\x11\n\x0f\n\x08\x04\0\
    \x03\x03\x04\0\x02\0\x12\x03\x1d\x0c\x1a\n\x10\n\t\x04\0\x03\x03\x04\0\
    \x02\0\x01\x12\x03\x1d\x0c\x15\n\x10\n\t\x04\0\x03\x03\x04\0\x02\0\x02\
    \x12\x03\x1d\x18\x19\n\x0f\n\x08\x04\0\x03\x03\x04\0\x02\x01\x12\x03\x1e\
    \x0c\x17\n\x10\n\t\x04\0\x03\x03\x04\0\x02\x01\x01\x12\x03\x1e\x0c\x12\n\
    \x10\n\t\x04\0\x03\x03\x04\0\x02\x01\x02\x12\x03\x1e\x15\x16\n\x0f\n\x08\
    \x04\0\x03\x03\x04\0\x02\x02\x12\x03\x1f\x0c\x16\n\x10\n\t\x04\0\x03\x03\
    \x04\0\x02\x02\x01\x12\x03\x1f\x0c\x11\n\x10\n\t\x04\0\x03\x03\x04\0\x02\
    \x02\x02\x12\x03\x1f\x14\x15\n\x0e\n\x06\x04\0\x03\x03\x03\0\x12\x04!\
    \x08$\t\n\x0e\n\x07\x04\0\x03\x03\x03\0\x01\x12\x03!\x10\x15\n\x0f\n\x08\
    \x04\0\x03\x03\x03\0\x02\0\x12\x03\"\x0c\x1c\n\x10\n\t\x04\0\x03\x03\x03\
    \0\x02\0\x05\x12\x03\"\x0c\x12\n\x10\n\t\x04\0\x03\x03\x03\0\x02\0\x01\
    \x12\x03\"\x13\x17\n\x10\n\t\x04\0\x03\x03\x03\0\x02\0\x03\x12\x03\"\x1a\
    \x1b\n\x0f\n\x08\x04\0\x03\x03\x03\0\x02\x01\x12\x03#\x0c\x1a\n\x10\n\t\
    \x04\0\x03\x03\x03\0\x02\x01\x06\x12\x03#\x0c\x10\n\x10\n\t\x04\0\x03\
    \x03\x03\0\x02\x01\x01\x12\x03#\x11\x15\n\x10\n\t\x04\0\x03\x03\x03\0\
    \x02\x01\x03\x12\x03#\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
